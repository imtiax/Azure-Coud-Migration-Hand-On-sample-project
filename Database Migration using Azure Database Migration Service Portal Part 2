Phase 1: Create Target Azure SQL Database
Step 1.1: Create Azure SQL Server
Navigate to Azure Portal
Go to https://portal.azure.com
Sign in with your MFA-enabled account
Create SQL Server
Click "Create a resource" (+ icon in top left)
Search for "SQL Server"
Click "SQL Server (logical server)"
Click "Create"

Configure SQL Server Basics
Subscription: Your subscription
Resource group: rg-techcorp-migration
Server name: techcorp-sql-server-prod (must be globally unique)
Location: Same as your VMs (recommend East US)
Authentication method: Select "Use SQL authentication"
Server admin login: sqladmin
Password: TechCorpAzure2024!@#
Confirm password: TechCorpAzure2024!@#

Configure Networking
Click "Next: Networking"
Connectivity method: Select "Public endpoint"
Allow Azure services: Yes
Add current client IP: Yes (this adds your public IP)

Security (Important for MFA Issues)
Click "Next: Security"
Enable Microsoft Defender for SQL: Not now (to avoid additional complexity)
Ledger: Not now

Create the Server
Click "Next: Additional settings"
Leave defaults
Click "Review + create"
Click "Create"
Wait for deployment to complete (2-3 minutes)

Step 1.2: Create Target Database

Navigate to SQL Server
Go to "All resources"
Click your SQL Server: techcorp-sql-server-prod

Create Database
Click "Create database" button
Database name: TechCorpDB-Prod
Compute + storage: Click "Configure database"

Configure Database Tier
Service tier: Select "General Purpose"
Compute tier: Provisioned
Generation: Gen5
vCores: 2 vCores (cost-effective for migration)
Data max size: 32 GB
Click "Apply"

Networking Configuration
Click "Next: Networking"
Connectivity method: Public endpoint
Allow Azure services: Yes
Add current client IP: Yes

Create Database
Click "Review + create"
Click "Create"
Wait for deployment (5-10 minutes)

Step 1.3: Configure Firewall Rules

Navigate to SQL Server
Go to your SQL Server: techcorp-sql-server-prod
Click "Networking" in left menu

Add Source Server IP
Under "Firewall rules"
Click "Add firewall rule"
Rule name: Source-Database-Server
Start IP: [Your techcorp-dbserver-legacy public IP]
End IP: [Same IP]
Click "Save"

Test Azure SQL Connectivity
Open SQL Server Management Studio
Server name: techcorp-sql-server-prod.database.windows.net
Authentication: SQL Server Authentication
Login: sqladmin
Password: TechCorpAzure2024!@#
Click "Connect"
Verify you can see TechCorpDB-Prod database


Phase 2: MFA Authentication Workaround Setup
Critical: Azure DMS has known issues with MFA-enabled accounts. We'll create a Service Principal for authentication.
Step 2.1: Create Service Principal via Portal

Navigate to Azure Active Directory
In Azure Portal, search for "Azure Active Directory"
Click "Azure Active Directory"

Create App Registration
Click "App registrations" in left menu
Click "New registration"
Name: TechCorp-DMS-ServicePrincipal
Supported account types: Accounts in this organizational directory only
Redirect URI: Leave blank
Click "Register"

Note Application Details
Copy and save these values:
Application (client) ID: [Copy this value]
Directory (tenant) ID: [Copy this value]

Create Client Secret
Click "Certificates & secrets" in left menu
Click "New client secret"
Description: DMS-Authentication-Secret
Expires: 24 months
Click "Add"
IMMEDIATELY COPY THE SECRET VALUE (you can't see it again)

Step 2.2: Assign Permissions

Navigate to Subscription
Search for "Subscriptions"
Click your subscription

Add Role Assignment
Click "Access control (IAM)" in left menu
Click "Add" â†’ "Add role assignment"
Role: Select "Contributor"
Click "Next"
Assign access to: User, group, or service principal
Click "Select members"
Search for: TechCorp-DMS-ServicePrincipal
Select it and click "Select"
Click "Review + assign"
Click "Review + assign" again

Phase 3: Create Database Migration Service
Step 3.1: Create DMS Instance

Create DMS Resource
Click "Create a resource"
Search for "Database Migration Service"
Click "Azure Database Migration Service"
Click "Create"


Configure DMS Basics
Subscription: Your subscription
Resource group: rg-techcorp-migration
Migration service name: techcorp-dms-service
Location: Same as your resources
Service mode: Azure
Pricing tier: Standard: 4 vCores

Configure Networking
Click Next: Networking"
Virtual network: Select existing VNet (or create new)
Subnet: Use default or create migration subnet

Create DMS
Click "Review + create"
Click "Create"
Wait for deployment (10-15 minutes)

Step 3.2: Create Migration Project

Navigate to DMS
Go to "All resources"
Click techcorp-dms-service

Create New Project
Click "New Migration Project"
Project name: TechCorpDB-Migration-Project
Source server type: SQL Server
Target server type: Azure SQL Database
Migration activity type: Data migration
Click "Create and run activity"

Phase 4: Configure Migration Activity
Step 4.1: Source Configuration

Source Server Settings
Source SQL Server instance name: [techcorp-dbserver-legacy-public-IP],1433
Authentication type: SQL Authentication
Username: sa
Password: TechCorp2024!@#
Encrypt connection: Unchecked (for simplicity during migration)
Trust server certificate: Checked
Test Source Connection

Click "Test connection"
Wait for "Connection successful" message
If connection fails:
Verify NSG rules allow port 1433
Check SQL Server TCP/IP is enabled
Verify SQL Server Browser is running


Step 4.2: Target Configuration

Target Server Settings
Target server name: techcorp-sql-server-prod.database.windows.net
Authentication type: SQL Authentication
Username: sqladmin
Password: TechCorpAzure2024!@#
Encrypt connection: Checked

Test Target Connection
Click "Test connection"
Wait for "Connection successful" message


Step 4.3: Database Selection
Select Source Databases
Check "TechCorpDB"
Target database: Select TechCorpDB-Prod

Schema Validation
Click "Next: Summary"
Review source and target details
Activity name: TechCorpDB-Full-Migration

Phase 5: Execute Migration
Step 5.1: Start Migration

Begin Migration
Click "Start migration"
Migration will begin automatically

Monitor Progress
Watch the migration status dashboard:
Schema migration: Usually completes in 2-5 minutes
Data migration: Time varies based on data size
Full backup: Shows progress of initial data copy
Log backup: Shows ongoing transaction log replay

Step 5.2: Monitor and Troubleshoot

Check Migration Status
Schema migration status: Should show "Completed"
Data migration status: Watch for "In Progress"
Tables migrated: Monitor table-by-table progress

Common Issues and Solutions
Connection Authentication Failed:
Verify firewall rules include source server IP
Check SQL Server mixed mode authentication
Test connections manually with SSMS

Schema Migration Errors:
Review incompatible features report
Note: Some SQL Server features aren't supported in Azure SQL Database

Data Migration Slow:
Monitor network connectivity
Check for large tables or LOB data

Phase 6: Validation and Cutover
Step 6.1: Validate Migration

Connect to Azure SQL Database
Open SQL Server Management Studio
Connect to: techcorp-sql-server-prod.database.windows.net
Database: TechCorpDB-Prod

Verify Data Migration
sql-- Check table counts
SELECT 
    t.name AS TableName,
    i.rows AS RowCount
FROM sys.tables t
INNER JOIN sys.sysindexes i ON t.object_id = i.id
WHERE i.indid < 2
ORDER BY TableName;

-- Verify sample data
SELECT TOP 10 * FROM Employees;
SELECT TOP 10 * FROM Products;
SELECT TOP 10 * FROM Orders;

Compare with Source
Run the same queries on source database
Verify row counts match
Spot check critical data

Step 6.2: Update Application Connection String

Get Azure SQL Connection String
In Azure Portal, go to your SQL Database
Click "Connection strings"
Copy the ADO.NET connection string
Replace password placeholder with actual password

Test Application Connectivity
Connect to your web server VM
Update web.config connection string
Test the web application functionality

Step 6.3: Cutover Planning

Schedule Maintenance Window
Plan for brief application downtime
Coordinate with business stakeholders

Cutover Steps
Stop application services
Run final data sync (if needed)
Update connection strings
Restart application services
Verify application functionality


Phase 7: Post-Migration Verification
Step 7.1: Performance Testing

Database Performance
Monitor query performance
Check for any performance degradation
Review Azure SQL Database recommendations

Application Testing
Test all critical application functions
Verify data integrity
Check user authentication and authorization

Step 7.2: Security Configuration

Network Security
Review and tighten firewall rules
Remove unnecessary IP addresses
Consider private endpoints for production

Authentication Security
Review SQL authentication settings
Consider Azure AD authentication
Implement least privilege access

Troubleshooting Guide
MFA Authentication Issues
Problem: DMS authentication fails with MFA-enabled account
Solution: Use Service Principal authentication (completed in Phase 2)
Problem: Cannot access Azure SQL Database
Solution:
Check firewall rules
Verify client IP is allowed
Test connection with SSMS

Network Connectivity Issues
Problem: Cannot connect to source SQL Server
Solution:
Verify NSG allows port 1433
Check SQL Server TCP/IP enabled
Confirm SQL Server Browser running
Test with telnet: telnet [server-ip] 1433

Problem: DMS cannot reach source database
Solution:
Add DMS subnet to NSG rules
Verify SQL Server remote connections enabled
Check Windows Firewall on source server

Migration Performance Issues
Problem: Migration is very slow
Solution:
Check network bandwidth
Consider higher DMS tier
Migrate during off-peak hours
Check for blocking processes on source

Problem: Schema migration fails
Solution:
Review compatibility report
Remove unsupported features
Use Azure SQL Database compatibility level


Success Criteria for Part 2
Checklist:
 Azure SQL Database created and accessible
 Service Principal configured for MFA workaround
 DMS instance deployed and configured
 Source database successfully connected
 Target database successfully connected
 Schema migration completed without errors
 Data migration completed successfully
 Data validation confirms accurate migration
 Application connection string updated
 Web application connects to Azure SQL Database
 Performance testing shows acceptable results

Key Metrics:
Migration time: [Record actual time]
Data accuracy: 100% (verified via row counts)
Application uptime: Minimized downtime during cutover
Performance: Response times within acceptable range
